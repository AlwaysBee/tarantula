#!/usr/bin/env node

'ues strict'

const request = require('request-promise'),
            _ = require('lodash'),
        async = require('async'),
         util = require('util'),
      program = require('commander'),
       moment = require('moment'),
       logger = require('log4js').getLogger(),
{ execSync, spawnSync } = require('child_process'),
         zlib = require('zlib')
     mapLimit = util.promisify(async.mapLimit),
        retry = util.promisify(async.retry)


const version = (() => {
  try{
   return require("tarantulajs/package.json").version
  }catch(e){
   return 'dev'
  }
})()

  const TIME_SLEEP = 1000 * 60 * 10,
OUTPUT_BUFFER_SIZE = 1024 * 1024 * 20,
   PROCESS_TIMEOUT = 1000 * 60 * 1,
       MAX_PROCESS = 5

program
  .version(version)
  .option('--max-process <n>', "max process number", MAX_PROCESS, parseInt)
  .option('--token <string>', "auth token")
  .option('-s --server <address>', "server address", "http://localhost:3000")
  .option('--debug', "debug mode", process.env.NODE_ENV != 'production')
  .parse(process.argv)


const DEBUG = !_.isEmpty(program.debug),
   ROOT_URL = program.server,
  TASK_PATH = `${ROOT_URL}/api/task`,
RESULT_PATH = `${ROOT_URL}/api/result`,
SCRIPT_PATH = `${ROOT_URL}/api/script`,
      token = program.token

const MESSAGE_ID_GOT_NOTHING = 0x01,
      MESSAGE_ID_SEND_FAILED = 0x02

logger.level = "ALL"

;function killProcessTree(topPid){
  if (DEBUG){
    return
  }

  const { stdout } = spawnSync('ps', ['-o', 'pid', '--no-headers', '--ppid', topPid || process.pid], {
    env: process.env
  })

  _.chain(stdout.toString()).split("\n").forEach((n) => {
    const pid = n.trim()
    if (pid.length == 0){
      return
    }

    killProcessTree(pid)
    try{ process.kill(Number(pid), 'SIGKILL') }catch(e){}
  }).value()
}

;function clean(){
  if (DEBUG){
    return
  }

  logger.info('clean.')

  const commands = [
    'rm -rf xvfb-run.* > /dev/null 2>&1',
    'rm -rf /tmp/slimerjs.* > /dev/null 2>&1',
    'rm -rf /tmp/xvfb-run.* > /dev/null 2>&1',
    'rm -rf /tmp/.X*-lock > /dev/null 2>&1',
    'rm -rf /tmp/.X11-unix/* > /dev/null 2>&1',
    `rm -rf "${__dirname}/core."* > /dev/null 2>&1`,
  ]

  _.each(commands, (n) => execSync(n))

  killProcessTree()
}

;function parseJson(v){
  try{
    return JSON.parse(v)
  }catch(e){}
}

let scriptCode = [
  /*
  {
    scriptName:
    md5:
    code:
    updatedAt:
  }
  */
]

logger.info(`debug mode: ${DEBUG}`)

;(async function main(){
  logger.info(`let's play.`)

  clean()

  Promise.resolve().then(async () => {
    return await request({
      url: TASK_PATH,
      qs: {token},
      json: true,
    })
  }).then(async (r) => {
    return await _.chain(r).get("tasks", []).map((n) => {
      return {
        scriptName: n.scriptName,
        md5: n.md5,
      }
    })
    .uniqWith(_.isEqual)
    .reject((n) => {
      const nn = _.find(scriptCode, (m) => m.scriptName == n.scriptName && m.md5 == n.md5)
      if (nn){
        nn.updatedAt = moment().toDate()
      }

      return nn
    })
    .thru(async (items) => {
      if (_.isEmpty(items)){
        return r
      }

      const itemsCode = await request({
        method: 'post',
        url: `${SCRIPT_PATH}/get_code`,
        json: {token, items},
      })

      _.each(itemsCode || [], (n) => {
        scriptCode.push(_.merge(n, {
          updatedAt: moment().toDate()
        }))
      })

      return r
    })
    .tap(() => {
      scriptCode = _.filter((n) => moment().diff(n.updatedAt, "days") < 15)
    })
    .value()
  }).then(({proxies, tasks}) => {
    if (_.isNil(tasks) || _.isEmpty(tasks)){
      throw {
        messageId: MESSAGE_ID_GOT_NOTHING
      }
    }

    return mapLimit(tasks, program.maxProcess, async (task) => {
      const ctx = parseJson(task.context)

      const forceProxy = _.get(ctx, 'force_proxy')
      const disableProxy = _.get(ctx, 'disable_proxy')
      const processTimeout = _.get(ctx, 'wait_timeout', PROCESS_TIMEOUT)

      const runCommand = `${__dirname}/tarantula-crawl`
      const runParams = []

      if(task.url){
        runParams.push('--url')
        runParams.push(task.url)
      }

      if (task.context){
        runParams.push('--context')
        runParams.push(task.context)
      }

      const env = _.merge({}, process.env, ctx || {})
      const proxy = _.chain(proxies).sample().value()

      if ((Number(task.attempts) == 0 && !disableProxy && proxy) || (forceProxy && proxy)){
        _.merge(env, {
          http_proxy: `${proxy.proxy_type}://${proxy.ip}:${proxy.port}`,
          https_proxy: `${proxy.proxy_type}://${proxy.ip}:${proxy.port}`,
        })
      }

      try{
        const s = _.find(scriptCode, (n) => n.md5 == task.md5)
        const { stdout, stderr } = spawnSync(runCommand, runParams, {
          env: env,
          maxBuffer: OUTPUT_BUFFER_SIZE,
          timeout: Number(processTimeout),
          input: s.code,
          //killSignal: 'SIGINT',     //SIGKILL
        })

        const taskResult = parseJson(stdout)
        if (!taskResult){
          throw stderr.toString()
        }

        if (_.isEmpty(taskResult.result) && _.isEmpty(taskResult.tasks)){
          throw {status: 500, message: "no result and tasks."}
        }

        return {
          id: task.id,
          result: taskResult.result,
          tasks: _.chain(taskResult.tasks || []).map((n) => {
            n.context = _.isObject(n.context) ? JSON.stringify(n.context) : n.context

            return n
          }).value()
        }
      }catch(e){
        if (task.attempts >= 3){
          logger.error(`${runCommand} ${runParams} message: ${e}`)
        }else{
          logger.warn(`${runCommand} ${runParams} message: ${e}`)
        }

        return {
          id: task.id,
          message: e || "unknown error"
        }
      }
    })
  }).then(async (result) => {

    if (DEBUG){
      logger.info(JSON.stringify(result, null, 2))
    }

    const headers = { "content-type": "application/json" }
    let sendBuffer = JSON.stringify({result})
    if (sendBuffer.length > 1024){
      _.merge(headers, {
        "content-type": "gzip/json"
      })

      sendBuffer = zlib.gzipSync(sendBuffer)
    }

    logger.info(`send data to server. ${sendBuffer.length}`)

    try {
      await retry({
        times: 5,
        interval: 1000 * 3,
      }, async () => {
        return await request({
          method: 'post',
          url: RESULT_PATH,
          qs: {token},
          headers: headers,
          body: sendBuffer,
        })
      })
    } catch (e) {
      throw {
        messageId: MESSAGE_ID_SEND_FAILED,
        message: e,
      }
    }

    setTimeout(main, 0)
  }).catch((e) => {
    if (e.messageId == MESSAGE_ID_GOT_NOTHING){
      logger.info(`got nothing.`)
      setTimeout(main, TIME_SLEEP)
    }else if (e.messageId == MESSAGE_ID_SEND_FAILED){
      logger.error(`send data failed.`)
      setTimeout(main, TIME_SLEEP)
    }else{
      logger.error(e)
    }
  })
})()
