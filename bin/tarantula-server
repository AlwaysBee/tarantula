#!/usr/bin/env node

'use strict'

const program = require("commander"),
            _ = require("lodash"),
          pm2 = require('pm2'),
         path = require("path"),
     bluebird = require("bluebird")

const version = (() => {
  try{
   return require("tarantula/package.json").version
  }catch(e){
   return 'dev'
  }
})()

program
  .version(version)
  .option('--start', "start a server")
  .option('--stop', "stop the server")
  .option('-p --port <port>', "listen port")
  .parse(process.argv)


;(async () => {
  const configPath = require.resolve("tarantulajs/pm2.json")
  const config = _.chain(require(configPath)).get("apps").map((n) => {
    return _.merge(n, {
      cwd: path.dirname(configPath),
      // args: `${n.args} ${}`
    })
  }).thru((items) => ({apps: items})).value()

  pm2.connect(async function(err) {
    if (err) {
      console.error(err)
      process.exit(2)
    }

    if (program.start){
      pm2.start(config, (err, apps) => {
        if (err){
          console.error(err)
        }

        pm2.disconnect();
      })
    }

    if (program.stop){
      const appNames = _.chain(config).get("apps").map("name").value()

      bluebird.map(appNames, (n) => {
        return new Promise((resolve, reject) => {
          pm2.delete(n, (err) => {
            if (err){
              reject(err)
              return
            }

            resolve()
          })
        })
      }).then(() => {
        pm2.list((err, apps) => {
          console.log(apps.length)
          if (apps.length > 0){
            pm2.disconnect();
            return
          }

          pm2.killDaemon((err) => {
            if (err){
              console.error(err)
            }

            console.log("killDaemon")
            process.exit()
          })
        })
      })
    }
  })
})()
